ver 82:
* Changed Joystick code. LED blink was too slow because of the print

ver 81
* Redone the micro tester so that it will blink the RX LED and keep all pins as HIGH.

ver 80
* Some code changes and comments added to MapleMini_BlinkWithButton script

ver 79:
* Added test script for Maple Mini that uses the button to change between blink intervals. Blink is done withoud using delay() method.

ver 78:
* Small code chamge in UltrasonicSensor sample

ver 77:
* Fixed versionig stuff

ver 76:
* Added one more comment in Replace_Delay. Added JSON samples for ESP8266 and Arduino Pro Micro.

ver 75:
* Added some more code and commets to Replace_delay sample

ver 74:
* Added Maple Mini Blink sample code. Tested and works well, tried with different delays()

ver 73:
* Added Replace_Delay code to show how to use millis() method call instead of delay()

ver 72:
* Added comments for print sample

ver 71:
* Added some number and string printing samples

ver 70:
* Finished with registers. Alot of commands for working with registers are under Register code. Added a small connection schema as well.

ver 69:
* Variables now hold output data in registers testing

ver 68:
* Added subdirectories for EEPROM and register writing. Tested and they work.

ver 67:
* Pin allocation and setting them high or low done through registers

ver 66:
* Tested EEPROM usage with Arduino Pro Micro

ver 65:
* Added Usages_of_Arduino code. Showing some stuff not previously cover in this repo. EEPROM read/write/clear works as needed.

ver 64:
* Changed Rotary encoder code so that it will work better.

ver 63:
* Changed color of one wire in Rotary Encoder Switch sample connection schema for better readability.

ver 62:
* Added STM32 testing script. Changed STM32 blink comments. Changed baud rate of ESP8266 DHT11 sample code.

ver 61:
* Updated STM32 sample Blink code. Now programmable with ST-Link.

ver 60:
* Added ESP8266 sample with RTC and DHT11 (temperature and humidity sensor).

ver 59:
* Added DHT11 (temperature and humidity sensor) sample code with ESP8622.

ver 58:
* Added ESP8266 client-server code. Two ESP8266s communicate with each other on WiFi network created by themselves.

ver 57:
* Deleted some more debugging printlns from SD card with RTC sample

ver 56:
* Removed println from tinyRTC with SD card sample. It was used for debugging.

ver 55
* Changed time on TinyRTC_Test. Added SD card with RTC sample.

ver 54
* Changed comment format in SD_Card_Read_Write_Sample. Added a global variable for filename.

ver 53
* Added ESP8266 and Arduino Pro Micro SD-Card reader sample. Changed I2C LCD address for testing. Changed STM32 blinking frequency.

ver 52
* Added ESP8266 WiFi sample with web pased LED blinking

ver 51
* Some rework on communication comments

ver 50
* Changed some comments in send_receive_micro code

ver 49
* Reworked the RS485 connection schema and changed some comments

ver 48
* Changed filename of RS485 schema and put one println back in RS485 Sender code. Gives a linebreak on ACK.

ver 47
* Updated RS485 code a bit

ver 46
* Added code to Micro UART communication, so now we have full dual communication (alot chatroom like)

ver 45
* Replaced faulty connection schematic for RS485

ver 44
* Added sample code to read PZEM004T multimeter data. It works on 230 VAC, single phase.

ver 43
* Newer displays have different I2C address. Added the new address to I2C display and I2C display with ultrasonic sensor samples.

ver 42
* Added a sample code for ultrasonic sensor and I2C display usage

ver 41
* Added script to test/show I2C LCD display usage

ver 40
* Added some test scripts to test different hardware components

ver 39
* In RS485 Send/Receive code added to delay to give more time to read received data. 10 ms was just too little time to read all data.

ver 38
* Added sample code to get array size dynamically into the blink without delay sample

ver 37
* Added simple Arduino blink sample, that doesn't use delay() method

ver 36
* SerialReader Python now uses vpython library (box object) to correspond to data sent by Arduino Micro. Data is generated by turning the encoder.

ver 35
* Changed ultrasonic sensor code a bit. Made python serial reader as separate project.

ver 34
* Made changes to python code.

ver 33
* Added python project to read UltrasonicSensor data from Serial port

ver 32
* Added ver.txt to have better overview of versions

ver 31
* Fixed buffer overrun on rotary rgb code, where brightness value was out of bounds

ver 30
* Added tuplicate key values for remote in IR sample

ver 29
* Made IR sensor to react to some remote control buttons and dim RGB LEDs accordingly

ver 28
* Added sample code to read IR sensor data from IR remote control

ver 27
* Added simple ultrasonic sensor code

ver 26
* Beautified changeColorBrightness if clauses

ver 25
* Deleted unnessecary comments

ver 24
* Changed switch/case to if in showEdited method in Rotary-RGB-LED sample

ver 23
* Changed schematics for rotary encoder samples

ver 22
* Changed some file structure

ver 21
* Made Rotary Encoder to control RGB LED color and brightness

ver 20
* Added pinout schema to RGB LED control folder

ver 19
* Made rotary encoder control RGB LED brightness

ver 18
* Added some comments for encoder. Made new file for encoder with RGB LED. Deleted a interrupt pic

ver 17
* Fixed rotary code; Added RGB LED connections;

ver 16
* Changed rotary encoder code. Added sample for STM32 board. Both untested.

ver 15
* Added Rotary Encoder Switch code. Right now it sometimes reads multiple pulses for one step

ver 14
* Added code to handle VHN2SP30 Single Motor Driver module control code. Haven't tested yet.

ver 13
* Added Arduino joystick test code

ver 12
* Added comments to the code

ver 11
* Added TTL-RS485-TTL communication logic for Micro

ver 10
* Added response for Sender and Response handleing for Receiver. Also some rework for blink sample.

ver 9
* Added some idea files; They didn't work with micro, but helped

ver 8
* Added code for Arduino Leonardo Micro UART communication (one sends, other receives)

ver 7
* Added simple web-page to turn LED on/off

ver 6
* Only reading first line of req

ver 5
* Monitoring request sent by other device for ESP8266

ver 4
* Added test code for ESP8266 WiFi board

ver 3
* Made some changes to IMU BNO055 code. After some tinkering and soldering later, got it to finally work with this code.

ver 2
* Added some Arduino sample codes

ver 1
* First commit